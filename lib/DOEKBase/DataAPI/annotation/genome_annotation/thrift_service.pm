#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use DOEKBase::DataAPI::annotation::genome_annotation::Types;

# HELPER FUNCTIONS AND STRUCTURES

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_taxon_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_taxon_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_taxon_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_taxon_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_assembly_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_assembly_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_assembly_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_assembly_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_args->mk_accessors( qw( token ref ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_types_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_types_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_types_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size16 = 0;
          $self->{success} = [];
          my $_etype19 = 0;
          $xfer += $input->readListBegin(\$_etype19, \$_size16);
          for (my $_i20 = 0; $_i20 < $_size16; ++$_i20)
          {
            my $elem21 = undef;
            $xfer += $input->readString(\$elem21);
            push(@{$self->{success}},$elem21);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_types_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{success}}));
      {
        foreach my $iter22 (@{$self->{success}}) 
        {
          $xfer += $output->writeString($iter22);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_args->mk_accessors( qw( token ref feature_type_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_type_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_type_list}) {
      $self->{feature_type_list} = $vals->{feature_type_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_descriptions_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size23 = 0;
          $self->{feature_type_list} = [];
          my $_etype26 = 0;
          $xfer += $input->readListBegin(\$_etype26, \$_size23);
          for (my $_i27 = 0; $_i27 < $_size23; ++$_i27)
          {
            my $elem28 = undef;
            $xfer += $input->readString(\$elem28);
            push(@{$self->{feature_type_list}},$elem28);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_descriptions_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_type_list}) {
    $xfer += $output->writeFieldBegin('feature_type_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_type_list}}));
      {
        foreach my $iter29 (@{$self->{feature_type_list}}) 
        {
          $xfer += $output->writeString($iter29);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_descriptions_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size30 = 0;
          $self->{success} = {};
          my $_ktype31 = 0;
          my $_vtype32 = 0;
          $xfer += $input->readMapBegin(\$_ktype31, \$_vtype32, \$_size30);
          for (my $_i34 = 0; $_i34 < $_size30; ++$_i34)
          {
            my $key35 = '';
            my $val36 = '';
            $xfer += $input->readString(\$key35);
            $xfer += $input->readString(\$val36);
            $self->{success}->{$key35} = $val36;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_descriptions_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter37,$viter38) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter37);
          $xfer += $output->writeString($viter38);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_args->mk_accessors( qw( token ref feature_type_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_type_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_type_list}) {
      $self->{feature_type_list} = $vals->{feature_type_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_counts_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size39 = 0;
          $self->{feature_type_list} = [];
          my $_etype42 = 0;
          $xfer += $input->readListBegin(\$_etype42, \$_size39);
          for (my $_i43 = 0; $_i43 < $_size39; ++$_i43)
          {
            my $elem44 = undef;
            $xfer += $input->readString(\$elem44);
            push(@{$self->{feature_type_list}},$elem44);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_counts_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_type_list}) {
    $xfer += $output->writeFieldBegin('feature_type_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_type_list}}));
      {
        foreach my $iter45 (@{$self->{feature_type_list}}) 
        {
          $xfer += $output->writeString($iter45);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_type_counts_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size46 = 0;
          $self->{success} = {};
          my $_ktype47 = 0;
          my $_vtype48 = 0;
          $xfer += $input->readMapBegin(\$_ktype47, \$_vtype48, \$_size46);
          for (my $_i50 = 0; $_i50 < $_size46; ++$_i50)
          {
            my $key51 = '';
            my $val52 = 0;
            $xfer += $input->readString(\$key51);
            $xfer += $input->readI64(\$val52);
            $self->{success}->{$key51} = $val52;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_type_counts_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::I64, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter53,$viter54) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter53);
          $xfer += $output->writeI64($viter54);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_args->mk_accessors( qw( token ref feature_type_list region_list function_list alias_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_type_list} = undef;
  $self->{region_list} = undef;
  $self->{function_list} = undef;
  $self->{alias_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_type_list}) {
      $self->{feature_type_list} = $vals->{feature_type_list};
    }
    if (defined $vals->{region_list}) {
      $self->{region_list} = $vals->{region_list};
    }
    if (defined $vals->{function_list}) {
      $self->{function_list} = $vals->{function_list};
    }
    if (defined $vals->{alias_list}) {
      $self->{alias_list} = $vals->{alias_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_ids_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size55 = 0;
          $self->{feature_type_list} = [];
          my $_etype58 = 0;
          $xfer += $input->readListBegin(\$_etype58, \$_size55);
          for (my $_i59 = 0; $_i59 < $_size55; ++$_i59)
          {
            my $elem60 = undef;
            $xfer += $input->readString(\$elem60);
            push(@{$self->{feature_type_list}},$elem60);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size61 = 0;
          $self->{region_list} = [];
          my $_etype64 = 0;
          $xfer += $input->readListBegin(\$_etype64, \$_size61);
          for (my $_i65 = 0; $_i65 < $_size61; ++$_i65)
          {
            my $elem66 = undef;
            $elem66 = new DOEKBase::DataAPI::annotation::genome_annotation::Region();
            $xfer += $elem66->read($input);
            push(@{$self->{region_list}},$elem66);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size67 = 0;
          $self->{function_list} = [];
          my $_etype70 = 0;
          $xfer += $input->readListBegin(\$_etype70, \$_size67);
          for (my $_i71 = 0; $_i71 < $_size67; ++$_i71)
          {
            my $elem72 = undef;
            $xfer += $input->readString(\$elem72);
            push(@{$self->{function_list}},$elem72);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size73 = 0;
          $self->{alias_list} = [];
          my $_etype76 = 0;
          $xfer += $input->readListBegin(\$_etype76, \$_size73);
          for (my $_i77 = 0; $_i77 < $_size73; ++$_i77)
          {
            my $elem78 = undef;
            $xfer += $input->readString(\$elem78);
            push(@{$self->{alias_list}},$elem78);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_ids_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_type_list}) {
    $xfer += $output->writeFieldBegin('feature_type_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_type_list}}));
      {
        foreach my $iter79 (@{$self->{feature_type_list}}) 
        {
          $xfer += $output->writeString($iter79);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{region_list}) {
    $xfer += $output->writeFieldBegin('region_list', TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{region_list}}));
      {
        foreach my $iter80 (@{$self->{region_list}}) 
        {
          $xfer += ${iter80}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{function_list}) {
    $xfer += $output->writeFieldBegin('function_list', TType::LIST, 5);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{function_list}}));
      {
        foreach my $iter81 (@{$self->{function_list}}) 
        {
          $xfer += $output->writeString($iter81);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{alias_list}) {
    $xfer += $output->writeFieldBegin('alias_list', TType::LIST, 6);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{alias_list}}));
      {
        foreach my $iter82 (@{$self->{alias_list}}) 
        {
          $xfer += $output->writeString($iter82);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_ids_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size83 = 0;
          $self->{success} = {};
          my $_ktype84 = 0;
          my $_vtype85 = 0;
          $xfer += $input->readMapBegin(\$_ktype84, \$_vtype85, \$_size83);
          for (my $_i87 = 0; $_i87 < $_size83; ++$_i87)
          {
            my $key88 = '';
            my $val89 = [];
            $xfer += $input->readString(\$key88);
            {
              my $_size90 = 0;
              $val89 = {};
              my $_ktype91 = 0;
              my $_vtype92 = 0;
              $xfer += $input->readMapBegin(\$_ktype91, \$_vtype92, \$_size90);
              for (my $_i94 = 0; $_i94 < $_size90; ++$_i94)
              {
                my $key95 = '';
                my $val96 = '';
                $xfer += $input->readString(\$key95);
                $xfer += $input->readString(\$val96);
                $val89->{$key95} = $val96;
              }
              $xfer += $input->readMapEnd();
            }
            $self->{success}->{$key88} = $val89;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_ids_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::MAP, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter97,$viter98) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter97);
          {
            $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{${viter98}}));
            {
              while( my ($kiter99,$viter100) = each %{${viter98}}) 
              {
                $xfer += $output->writeString($kiter99);
                $xfer += $output->writeString($viter100);
              }
            }
            $xfer += $output->writeMapEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_features_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size101 = 0;
          $self->{feature_id_list} = [];
          my $_etype104 = 0;
          $xfer += $input->readListBegin(\$_etype104, \$_size101);
          for (my $_i105 = 0; $_i105 < $_size101; ++$_i105)
          {
            my $elem106 = undef;
            $xfer += $input->readString(\$elem106);
            push(@{$self->{feature_id_list}},$elem106);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_features_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter107 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter107);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_features_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size108 = 0;
          $self->{success} = {};
          my $_ktype109 = 0;
          my $_vtype110 = 0;
          $xfer += $input->readMapBegin(\$_ktype109, \$_vtype110, \$_size108);
          for (my $_i112 = 0; $_i112 < $_size108; ++$_i112)
          {
            my $key113 = '';
            my $val114 = '';
            $xfer += $input->readString(\$key113);
            $xfer += $input->readString(\$val114);
            $self->{success}->{$key113} = $val114;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_features_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter115,$viter116) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter115);
          $xfer += $output->writeString($viter116);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_proteins_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size117 = 0;
          $self->{feature_id_list} = [];
          my $_etype120 = 0;
          $xfer += $input->readListBegin(\$_etype120, \$_size117);
          for (my $_i121 = 0; $_i121 < $_size117; ++$_i121)
          {
            my $elem122 = undef;
            $xfer += $input->readString(\$elem122);
            push(@{$self->{feature_id_list}},$elem122);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_proteins_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter123 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter123);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_proteins_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size124 = 0;
          $self->{success} = {};
          my $_ktype125 = 0;
          my $_vtype126 = 0;
          $xfer += $input->readMapBegin(\$_ktype125, \$_vtype126, \$_size124);
          for (my $_i128 = 0; $_i128 < $_size124; ++$_i128)
          {
            my $key129 = '';
            my $val130 = '';
            $xfer += $input->readString(\$key129);
            $xfer += $input->readString(\$val130);
            $self->{success}->{$key129} = $val130;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_proteins_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter131,$viter132) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter131);
          $xfer += $output->writeString($viter132);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_locations_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size133 = 0;
          $self->{feature_id_list} = [];
          my $_etype136 = 0;
          $xfer += $input->readListBegin(\$_etype136, \$_size133);
          for (my $_i137 = 0; $_i137 < $_size133; ++$_i137)
          {
            my $elem138 = undef;
            $xfer += $input->readString(\$elem138);
            push(@{$self->{feature_id_list}},$elem138);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_locations_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter139 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter139);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_locations_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size140 = 0;
          $self->{success} = {};
          my $_ktype141 = 0;
          my $_vtype142 = 0;
          $xfer += $input->readMapBegin(\$_ktype141, \$_vtype142, \$_size140);
          for (my $_i144 = 0; $_i144 < $_size140; ++$_i144)
          {
            my $key145 = '';
            my $val146 = [];
            $xfer += $input->readString(\$key145);
            {
              my $_size147 = 0;
              $val146 = [];
              my $_etype150 = 0;
              $xfer += $input->readListBegin(\$_etype150, \$_size147);
              for (my $_i151 = 0; $_i151 < $_size147; ++$_i151)
              {
                my $elem152 = undef;
                $elem152 = new DOEKBase::DataAPI::annotation::genome_annotation::Region();
                $xfer += $elem152->read($input);
                push(@{$val146},$elem152);
              }
              $xfer += $input->readListEnd();
            }
            $self->{success}->{$key145} = $val146;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_locations_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::LIST, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter153,$viter154) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter153);
          {
            $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{${viter154}}));
            {
              foreach my $iter155 (@{${viter154}}) 
              {
                $xfer += ${iter155}->write($output);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_publications_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size156 = 0;
          $self->{feature_id_list} = [];
          my $_etype159 = 0;
          $xfer += $input->readListBegin(\$_etype159, \$_size156);
          for (my $_i160 = 0; $_i160 < $_size156; ++$_i160)
          {
            my $elem161 = undef;
            $xfer += $input->readString(\$elem161);
            push(@{$self->{feature_id_list}},$elem161);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_publications_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter162 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter162);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_publications_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size163 = 0;
          $self->{success} = {};
          my $_ktype164 = 0;
          my $_vtype165 = 0;
          $xfer += $input->readMapBegin(\$_ktype164, \$_vtype165, \$_size163);
          for (my $_i167 = 0; $_i167 < $_size163; ++$_i167)
          {
            my $key168 = '';
            my $val169 = '';
            $xfer += $input->readString(\$key168);
            $xfer += $input->readString(\$val169);
            $self->{success}->{$key168} = $val169;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_publications_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter170,$viter171) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter170);
          $xfer += $output->writeString($viter171);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_dna_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size172 = 0;
          $self->{feature_id_list} = [];
          my $_etype175 = 0;
          $xfer += $input->readListBegin(\$_etype175, \$_size172);
          for (my $_i176 = 0; $_i176 < $_size172; ++$_i176)
          {
            my $elem177 = undef;
            $xfer += $input->readString(\$elem177);
            push(@{$self->{feature_id_list}},$elem177);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_dna_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter178 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter178);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_dna_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size179 = 0;
          $self->{success} = {};
          my $_ktype180 = 0;
          my $_vtype181 = 0;
          $xfer += $input->readMapBegin(\$_ktype180, \$_vtype181, \$_size179);
          for (my $_i183 = 0; $_i183 < $_size179; ++$_i183)
          {
            my $key184 = '';
            my $val185 = '';
            $xfer += $input->readString(\$key184);
            $xfer += $input->readString(\$val185);
            $self->{success}->{$key184} = $val185;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_dna_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter186,$viter187) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter186);
          $xfer += $output->writeString($viter187);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_functions_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size188 = 0;
          $self->{feature_id_list} = [];
          my $_etype191 = 0;
          $xfer += $input->readListBegin(\$_etype191, \$_size188);
          for (my $_i192 = 0; $_i192 < $_size188; ++$_i192)
          {
            my $elem193 = undef;
            $xfer += $input->readString(\$elem193);
            push(@{$self->{feature_id_list}},$elem193);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_functions_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter194 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter194);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_functions_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size195 = 0;
          $self->{success} = {};
          my $_ktype196 = 0;
          my $_vtype197 = 0;
          $xfer += $input->readMapBegin(\$_ktype196, \$_vtype197, \$_size195);
          for (my $_i199 = 0; $_i199 < $_size195; ++$_i199)
          {
            my $key200 = '';
            my $val201 = '';
            $xfer += $input->readString(\$key200);
            $xfer += $input->readString(\$val201);
            $self->{success}->{$key200} = $val201;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_functions_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter202,$viter203) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter202);
          $xfer += $output->writeString($viter203);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_args->mk_accessors( qw( token ref feature_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{feature_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{feature_id_list}) {
      $self->{feature_id_list} = $vals->{feature_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_aliases_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size204 = 0;
          $self->{feature_id_list} = [];
          my $_etype207 = 0;
          $xfer += $input->readListBegin(\$_etype207, \$_size204);
          for (my $_i208 = 0; $_i208 < $_size204; ++$_i208)
          {
            my $elem209 = undef;
            $xfer += $input->readString(\$elem209);
            push(@{$self->{feature_id_list}},$elem209);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_aliases_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{feature_id_list}) {
    $xfer += $output->writeFieldBegin('feature_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{feature_id_list}}));
      {
        foreach my $iter210 (@{$self->{feature_id_list}}) 
        {
          $xfer += $output->writeString($iter210);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_feature_aliases_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size211 = 0;
          $self->{success} = {};
          my $_ktype212 = 0;
          my $_vtype213 = 0;
          $xfer += $input->readMapBegin(\$_ktype212, \$_vtype213, \$_size211);
          for (my $_i215 = 0; $_i215 < $_size211; ++$_i215)
          {
            my $key216 = '';
            my $val217 = [];
            $xfer += $input->readString(\$key216);
            {
              my $_size218 = 0;
              $val217 = [];
              my $_etype221 = 0;
              $xfer += $input->readListBegin(\$_etype221, \$_size218);
              for (my $_i222 = 0; $_i222 < $_size218; ++$_i222)
              {
                my $elem223 = undef;
                $xfer += $input->readString(\$elem223);
                push(@{$val217},$elem223);
              }
              $xfer += $input->readListEnd();
            }
            $self->{success}->{$key216} = $val217;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_feature_aliases_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::LIST, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter224,$viter225) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter224);
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${viter225}}));
            {
              foreach my $iter226 (@{${viter225}}) 
              {
                $xfer += $output->writeString($iter226);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_args->mk_accessors( qw( token ref gene_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{gene_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{gene_id_list}) {
      $self->{gene_id_list} = $vals->{gene_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_gene_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size227 = 0;
          $self->{gene_id_list} = [];
          my $_etype230 = 0;
          $xfer += $input->readListBegin(\$_etype230, \$_size227);
          for (my $_i231 = 0; $_i231 < $_size227; ++$_i231)
          {
            my $elem232 = undef;
            $xfer += $input->readString(\$elem232);
            push(@{$self->{gene_id_list}},$elem232);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_gene_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gene_id_list}) {
    $xfer += $output->writeFieldBegin('gene_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{gene_id_list}}));
      {
        foreach my $iter233 (@{$self->{gene_id_list}}) 
        {
          $xfer += $output->writeString($iter233);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_gene_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size234 = 0;
          $self->{success} = {};
          my $_ktype235 = 0;
          my $_vtype236 = 0;
          $xfer += $input->readMapBegin(\$_ktype235, \$_vtype236, \$_size234);
          for (my $_i238 = 0; $_i238 < $_size234; ++$_i238)
          {
            my $key239 = '';
            my $val240 = '';
            $xfer += $input->readString(\$key239);
            $xfer += $input->readString(\$val240);
            $self->{success}->{$key239} = $val240;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_gene_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter241,$viter242) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter241);
          $xfer += $output->writeString($viter242);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_args->mk_accessors( qw( token ref mrna_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{mrna_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{mrna_id_list}) {
      $self->{mrna_id_list} = $vals->{mrna_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_mrna_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size243 = 0;
          $self->{mrna_id_list} = [];
          my $_etype246 = 0;
          $xfer += $input->readListBegin(\$_etype246, \$_size243);
          for (my $_i247 = 0; $_i247 < $_size243; ++$_i247)
          {
            my $elem248 = undef;
            $xfer += $input->readString(\$elem248);
            push(@{$self->{mrna_id_list}},$elem248);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_mrna_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mrna_id_list}) {
    $xfer += $output->writeFieldBegin('mrna_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{mrna_id_list}}));
      {
        foreach my $iter249 (@{$self->{mrna_id_list}}) 
        {
          $xfer += $output->writeString($iter249);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_cds_by_mrna_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size250 = 0;
          $self->{success} = {};
          my $_ktype251 = 0;
          my $_vtype252 = 0;
          $xfer += $input->readMapBegin(\$_ktype251, \$_vtype252, \$_size250);
          for (my $_i254 = 0; $_i254 < $_size250; ++$_i254)
          {
            my $key255 = '';
            my $val256 = '';
            $xfer += $input->readString(\$key255);
            $xfer += $input->readString(\$val256);
            $self->{success}->{$key255} = $val256;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_cds_by_mrna_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter257,$viter258) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter257);
          $xfer += $output->writeString($viter258);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_args->mk_accessors( qw( token ref cds_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{cds_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{cds_id_list}) {
      $self->{cds_id_list} = $vals->{cds_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_cds_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size259 = 0;
          $self->{cds_id_list} = [];
          my $_etype262 = 0;
          $xfer += $input->readListBegin(\$_etype262, \$_size259);
          for (my $_i263 = 0; $_i263 < $_size259; ++$_i263)
          {
            my $elem264 = undef;
            $xfer += $input->readString(\$elem264);
            push(@{$self->{cds_id_list}},$elem264);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_cds_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cds_id_list}) {
    $xfer += $output->writeFieldBegin('cds_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{cds_id_list}}));
      {
        foreach my $iter265 (@{$self->{cds_id_list}}) 
        {
          $xfer += $output->writeString($iter265);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_cds_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size266 = 0;
          $self->{success} = {};
          my $_ktype267 = 0;
          my $_vtype268 = 0;
          $xfer += $input->readMapBegin(\$_ktype267, \$_vtype268, \$_size266);
          for (my $_i270 = 0; $_i270 < $_size266; ++$_i270)
          {
            my $key271 = '';
            my $val272 = '';
            $xfer += $input->readString(\$key271);
            $xfer += $input->readString(\$val272);
            $self->{success}->{$key271} = $val272;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_cds_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter273,$viter274) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter273);
          $xfer += $output->writeString($viter274);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_args->mk_accessors( qw( token ref mrna_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{mrna_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{mrna_id_list}) {
      $self->{mrna_id_list} = $vals->{mrna_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_mrna_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size275 = 0;
          $self->{mrna_id_list} = [];
          my $_etype278 = 0;
          $xfer += $input->readListBegin(\$_etype278, \$_size275);
          for (my $_i279 = 0; $_i279 < $_size275; ++$_i279)
          {
            my $elem280 = undef;
            $xfer += $input->readString(\$elem280);
            push(@{$self->{mrna_id_list}},$elem280);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_mrna_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mrna_id_list}) {
    $xfer += $output->writeFieldBegin('mrna_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{mrna_id_list}}));
      {
        foreach my $iter281 (@{$self->{mrna_id_list}}) 
        {
          $xfer += $output->writeString($iter281);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_gene_by_mrna_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size282 = 0;
          $self->{success} = {};
          my $_ktype283 = 0;
          my $_vtype284 = 0;
          $xfer += $input->readMapBegin(\$_ktype283, \$_vtype284, \$_size282);
          for (my $_i286 = 0; $_i286 < $_size282; ++$_i286)
          {
            my $key287 = '';
            my $val288 = '';
            $xfer += $input->readString(\$key287);
            $xfer += $input->readString(\$val288);
            $self->{success}->{$key287} = $val288;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_gene_by_mrna_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter289,$viter290) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter289);
          $xfer += $output->writeString($viter290);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_args->mk_accessors( qw( token ref gene_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{gene_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{gene_id_list}) {
      $self->{gene_id_list} = $vals->{gene_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_cds_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size291 = 0;
          $self->{gene_id_list} = [];
          my $_etype294 = 0;
          $xfer += $input->readListBegin(\$_etype294, \$_size291);
          for (my $_i295 = 0; $_i295 < $_size291; ++$_i295)
          {
            my $elem296 = undef;
            $xfer += $input->readString(\$elem296);
            push(@{$self->{gene_id_list}},$elem296);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_cds_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gene_id_list}) {
    $xfer += $output->writeFieldBegin('gene_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{gene_id_list}}));
      {
        foreach my $iter297 (@{$self->{gene_id_list}}) 
        {
          $xfer += $output->writeString($iter297);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_cds_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size298 = 0;
          $self->{success} = {};
          my $_ktype299 = 0;
          my $_vtype300 = 0;
          $xfer += $input->readMapBegin(\$_ktype299, \$_vtype300, \$_size298);
          for (my $_i302 = 0; $_i302 < $_size298; ++$_i302)
          {
            my $key303 = '';
            my $val304 = '';
            $xfer += $input->readString(\$key303);
            $xfer += $input->readString(\$val304);
            $self->{success}->{$key303} = $val304;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_cds_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter305,$viter306) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter305);
          $xfer += $output->writeString($viter306);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_args;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_args->mk_accessors( qw( token ref gene_id_list ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{token} = undef;
  $self->{ref} = undef;
  $self->{gene_id_list} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{token}) {
      $self->{token} = $vals->{token};
    }
    if (defined $vals->{ref}) {
      $self->{ref} = $vals->{ref};
    }
    if (defined $vals->{gene_id_list}) {
      $self->{gene_id_list} = $vals->{gene_id_list};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_gene_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{token});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ref});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size307 = 0;
          $self->{gene_id_list} = [];
          my $_etype310 = 0;
          $xfer += $input->readListBegin(\$_etype310, \$_size307);
          for (my $_i311 = 0; $_i311 < $_size307; ++$_i311)
          {
            my $elem312 = undef;
            $xfer += $input->readString(\$elem312);
            push(@{$self->{gene_id_list}},$elem312);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_gene_args');
  if (defined $self->{token}) {
    $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
    $xfer += $output->writeString($self->{token});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ref}) {
    $xfer += $output->writeFieldBegin('ref', TType::STRING, 2);
    $xfer += $output->writeString($self->{ref});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gene_id_list}) {
    $xfer += $output->writeFieldBegin('gene_id_list', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRING, scalar(@{$self->{gene_id_list}}));
      {
        foreach my $iter313 (@{$self->{gene_id_list}}) 
        {
          $xfer += $output->writeString($iter313);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_result;
use base qw(Class::Accessor);
DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{generic_exception} = undef;
  $self->{authorization_exception} = undef;
  $self->{authentication_exception} = undef;
  $self->{reference_exception} = undef;
  $self->{attribute_exception} = undef;
  $self->{type_exception} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{generic_exception}) {
      $self->{generic_exception} = $vals->{generic_exception};
    }
    if (defined $vals->{authorization_exception}) {
      $self->{authorization_exception} = $vals->{authorization_exception};
    }
    if (defined $vals->{authentication_exception}) {
      $self->{authentication_exception} = $vals->{authentication_exception};
    }
    if (defined $vals->{reference_exception}) {
      $self->{reference_exception} = $vals->{reference_exception};
    }
    if (defined $vals->{attribute_exception}) {
      $self->{attribute_exception} = $vals->{attribute_exception};
    }
    if (defined $vals->{type_exception}) {
      $self->{type_exception} = $vals->{type_exception};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'thrift_service_get_mrna_by_gene_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size314 = 0;
          $self->{success} = {};
          my $_ktype315 = 0;
          my $_vtype316 = 0;
          $xfer += $input->readMapBegin(\$_ktype315, \$_vtype316, \$_size314);
          for (my $_i318 = 0; $_i318 < $_size314; ++$_i318)
          {
            my $key319 = '';
            my $val320 = '';
            $xfer += $input->readString(\$key319);
            $xfer += $input->readString(\$val320);
            $self->{success}->{$key319} = $val320;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{generic_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ServiceException();
        $xfer += $self->{generic_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authorization_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException();
        $xfer += $self->{authorization_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{authentication_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException();
        $xfer += $self->{authentication_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{reference_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException();
        $xfer += $self->{reference_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{attribute_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::AttributeException();
        $xfer += $self->{attribute_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{type_exception} = new DOEKBase::DataAPI::annotation::genome_annotation::TypeException();
        $xfer += $self->{type_exception}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('thrift_service_get_mrna_by_gene_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
    {
      $xfer += $output->writeMapBegin(TType::STRING, TType::STRING, scalar(keys %{$self->{success}}));
      {
        while( my ($kiter321,$viter322) = each %{$self->{success}}) 
        {
          $xfer += $output->writeString($kiter321);
          $xfer += $output->writeString($viter322);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{generic_exception}) {
    $xfer += $output->writeFieldBegin('generic_exception', TType::STRUCT, 1);
    $xfer += $self->{generic_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authorization_exception}) {
    $xfer += $output->writeFieldBegin('authorization_exception', TType::STRUCT, 2);
    $xfer += $self->{authorization_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{authentication_exception}) {
    $xfer += $output->writeFieldBegin('authentication_exception', TType::STRUCT, 3);
    $xfer += $self->{authentication_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reference_exception}) {
    $xfer += $output->writeFieldBegin('reference_exception', TType::STRUCT, 4);
    $xfer += $self->{reference_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{attribute_exception}) {
    $xfer += $output->writeFieldBegin('attribute_exception', TType::STRUCT, 5);
    $xfer += $self->{attribute_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_exception}) {
    $xfer += $output->writeFieldBegin('type_exception', TType::STRUCT, 6);
    $xfer += $self->{type_exception}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_serviceIf;

use strict;


sub get_taxon{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_assembly{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_feature_types{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  die 'implement interface';
}

sub get_feature_type_descriptions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  die 'implement interface';
}

sub get_feature_type_counts{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  die 'implement interface';
}

sub get_feature_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;
  my $region_list = shift;
  my $function_list = shift;
  my $alias_list = shift;

  die 'implement interface';
}

sub get_features{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_proteins{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_locations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_publications{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_dna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_functions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_feature_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  die 'implement interface';
}

sub get_cds_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  die 'implement interface';
}

sub get_cds_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  die 'implement interface';
}

sub get_gene_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $cds_id_list = shift;

  die 'implement interface';
}

sub get_gene_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  die 'implement interface';
}

sub get_mrna_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  die 'implement interface';
}

sub get_mrna_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  die 'implement interface';
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_serviceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub get_taxon{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_taxon($token, $ref);
}

sub get_assembly{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_assembly($token, $ref);
}

sub get_feature_types{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  return $self->{impl}->get_feature_types($token, $ref);
}

sub get_feature_type_descriptions{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_type_list = ($request->{'feature_type_list'}) ? $request->{'feature_type_list'} : undef;
  return $self->{impl}->get_feature_type_descriptions($token, $ref, $feature_type_list);
}

sub get_feature_type_counts{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_type_list = ($request->{'feature_type_list'}) ? $request->{'feature_type_list'} : undef;
  return $self->{impl}->get_feature_type_counts($token, $ref, $feature_type_list);
}

sub get_feature_ids{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_type_list = ($request->{'feature_type_list'}) ? $request->{'feature_type_list'} : undef;
  my $region_list = ($request->{'region_list'}) ? $request->{'region_list'} : undef;
  my $function_list = ($request->{'function_list'}) ? $request->{'function_list'} : undef;
  my $alias_list = ($request->{'alias_list'}) ? $request->{'alias_list'} : undef;
  return $self->{impl}->get_feature_ids($token, $ref, $feature_type_list, $region_list, $function_list, $alias_list);
}

sub get_features{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_features($token, $ref, $feature_id_list);
}

sub get_proteins{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_proteins($token, $ref, $feature_id_list);
}

sub get_feature_locations{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_locations($token, $ref, $feature_id_list);
}

sub get_feature_publications{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_publications($token, $ref, $feature_id_list);
}

sub get_feature_dna{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_dna($token, $ref, $feature_id_list);
}

sub get_feature_functions{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_functions($token, $ref, $feature_id_list);
}

sub get_feature_aliases{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $feature_id_list = ($request->{'feature_id_list'}) ? $request->{'feature_id_list'} : undef;
  return $self->{impl}->get_feature_aliases($token, $ref, $feature_id_list);
}

sub get_cds_by_gene{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $gene_id_list = ($request->{'gene_id_list'}) ? $request->{'gene_id_list'} : undef;
  return $self->{impl}->get_cds_by_gene($token, $ref, $gene_id_list);
}

sub get_cds_by_mrna{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $mrna_id_list = ($request->{'mrna_id_list'}) ? $request->{'mrna_id_list'} : undef;
  return $self->{impl}->get_cds_by_mrna($token, $ref, $mrna_id_list);
}

sub get_gene_by_cds{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $cds_id_list = ($request->{'cds_id_list'}) ? $request->{'cds_id_list'} : undef;
  return $self->{impl}->get_gene_by_cds($token, $ref, $cds_id_list);
}

sub get_gene_by_mrna{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $mrna_id_list = ($request->{'mrna_id_list'}) ? $request->{'mrna_id_list'} : undef;
  return $self->{impl}->get_gene_by_mrna($token, $ref, $mrna_id_list);
}

sub get_mrna_by_cds{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $gene_id_list = ($request->{'gene_id_list'}) ? $request->{'gene_id_list'} : undef;
  return $self->{impl}->get_mrna_by_cds($token, $ref, $gene_id_list);
}

sub get_mrna_by_gene{
  my ($self, $request) = @_;

  my $token = ($request->{'token'}) ? $request->{'token'} : undef;
  my $ref = ($request->{'ref'}) ? $request->{'ref'} : undef;
  my $gene_id_list = ($request->{'gene_id_list'}) ? $request->{'gene_id_list'} : undef;
  return $self->{impl}->get_mrna_by_gene($token, $ref, $gene_id_list);
}

package DOEKBase::DataAPI::annotation::genome_annotation::thrift_serviceClient;


use base qw(DOEKBase::DataAPI::annotation::genome_annotation::thrift_serviceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub get_taxon{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_taxon($token, $ref);
  return $self->recv_get_taxon();
}

sub send_get_taxon{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_taxon', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_taxon{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_taxon failed: unknown result";
}
sub get_assembly{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_assembly($token, $ref);
  return $self->recv_get_assembly();
}

sub send_get_assembly{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_assembly', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_assembly{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_assembly failed: unknown result";
}
sub get_feature_types{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

    $self->send_get_feature_types($token, $ref);
  return $self->recv_get_feature_types();
}

sub send_get_feature_types{
  my $self = shift;
  my $token = shift;
  my $ref = shift;

  $self->{output}->writeMessageBegin('get_feature_types', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_types{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_types failed: unknown result";
}
sub get_feature_type_descriptions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

    $self->send_get_feature_type_descriptions($token, $ref, $feature_type_list);
  return $self->recv_get_feature_type_descriptions();
}

sub send_get_feature_type_descriptions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  $self->{output}->writeMessageBegin('get_feature_type_descriptions', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_type_list} = $feature_type_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_type_descriptions{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_type_descriptions failed: unknown result";
}
sub get_feature_type_counts{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

    $self->send_get_feature_type_counts($token, $ref, $feature_type_list);
  return $self->recv_get_feature_type_counts();
}

sub send_get_feature_type_counts{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;

  $self->{output}->writeMessageBegin('get_feature_type_counts', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_type_list} = $feature_type_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_type_counts{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_type_counts failed: unknown result";
}
sub get_feature_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;
  my $region_list = shift;
  my $function_list = shift;
  my $alias_list = shift;

    $self->send_get_feature_ids($token, $ref, $feature_type_list, $region_list, $function_list, $alias_list);
  return $self->recv_get_feature_ids();
}

sub send_get_feature_ids{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_type_list = shift;
  my $region_list = shift;
  my $function_list = shift;
  my $alias_list = shift;

  $self->{output}->writeMessageBegin('get_feature_ids', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_type_list} = $feature_type_list;
  $args->{region_list} = $region_list;
  $args->{function_list} = $function_list;
  $args->{alias_list} = $alias_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_ids{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_ids failed: unknown result";
}
sub get_features{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_features($token, $ref, $feature_id_list);
  return $self->recv_get_features();
}

sub send_get_features{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_features', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_features{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_features failed: unknown result";
}
sub get_proteins{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_proteins($token, $ref, $feature_id_list);
  return $self->recv_get_proteins();
}

sub send_get_proteins{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_proteins', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_proteins{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_proteins failed: unknown result";
}
sub get_feature_locations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_locations($token, $ref, $feature_id_list);
  return $self->recv_get_feature_locations();
}

sub send_get_feature_locations{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_locations', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_locations{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_locations failed: unknown result";
}
sub get_feature_publications{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_publications($token, $ref, $feature_id_list);
  return $self->recv_get_feature_publications();
}

sub send_get_feature_publications{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_publications', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_publications{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_publications failed: unknown result";
}
sub get_feature_dna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_dna($token, $ref, $feature_id_list);
  return $self->recv_get_feature_dna();
}

sub send_get_feature_dna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_dna', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_dna{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_dna failed: unknown result";
}
sub get_feature_functions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_functions($token, $ref, $feature_id_list);
  return $self->recv_get_feature_functions();
}

sub send_get_feature_functions{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_functions', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_functions{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_functions failed: unknown result";
}
sub get_feature_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

    $self->send_get_feature_aliases($token, $ref, $feature_id_list);
  return $self->recv_get_feature_aliases();
}

sub send_get_feature_aliases{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $feature_id_list = shift;

  $self->{output}->writeMessageBegin('get_feature_aliases', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{feature_id_list} = $feature_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_feature_aliases{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_feature_aliases failed: unknown result";
}
sub get_cds_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

    $self->send_get_cds_by_gene($token, $ref, $gene_id_list);
  return $self->recv_get_cds_by_gene();
}

sub send_get_cds_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  $self->{output}->writeMessageBegin('get_cds_by_gene', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{gene_id_list} = $gene_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_cds_by_gene{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_cds_by_gene failed: unknown result";
}
sub get_cds_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

    $self->send_get_cds_by_mrna($token, $ref, $mrna_id_list);
  return $self->recv_get_cds_by_mrna();
}

sub send_get_cds_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  $self->{output}->writeMessageBegin('get_cds_by_mrna', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{mrna_id_list} = $mrna_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_cds_by_mrna{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_cds_by_mrna failed: unknown result";
}
sub get_gene_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $cds_id_list = shift;

    $self->send_get_gene_by_cds($token, $ref, $cds_id_list);
  return $self->recv_get_gene_by_cds();
}

sub send_get_gene_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $cds_id_list = shift;

  $self->{output}->writeMessageBegin('get_gene_by_cds', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{cds_id_list} = $cds_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_gene_by_cds{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_gene_by_cds failed: unknown result";
}
sub get_gene_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

    $self->send_get_gene_by_mrna($token, $ref, $mrna_id_list);
  return $self->recv_get_gene_by_mrna();
}

sub send_get_gene_by_mrna{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $mrna_id_list = shift;

  $self->{output}->writeMessageBegin('get_gene_by_mrna', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{mrna_id_list} = $mrna_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_gene_by_mrna{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_gene_by_mrna failed: unknown result";
}
sub get_mrna_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

    $self->send_get_mrna_by_cds($token, $ref, $gene_id_list);
  return $self->recv_get_mrna_by_cds();
}

sub send_get_mrna_by_cds{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  $self->{output}->writeMessageBegin('get_mrna_by_cds', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{gene_id_list} = $gene_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_mrna_by_cds{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_mrna_by_cds failed: unknown result";
}
sub get_mrna_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

    $self->send_get_mrna_by_gene($token, $ref, $gene_id_list);
  return $self->recv_get_mrna_by_gene();
}

sub send_get_mrna_by_gene{
  my $self = shift;
  my $token = shift;
  my $ref = shift;
  my $gene_id_list = shift;

  $self->{output}->writeMessageBegin('get_mrna_by_gene', TMessageType::CALL, $self->{seqid});
  my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_args();
  $args->{token} = $token;
  $args->{ref} = $ref;
  $args->{gene_id_list} = $gene_id_list;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_mrna_by_gene{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{generic_exception}) {
    die $result->{generic_exception};
  }
  if (defined $result->{authorization_exception}) {
    die $result->{authorization_exception};
  }
  if (defined $result->{authentication_exception}) {
    die $result->{authentication_exception};
  }
  if (defined $result->{reference_exception}) {
    die $result->{reference_exception};
  }
  if (defined $result->{attribute_exception}) {
    die $result->{attribute_exception};
  }
  if (defined $result->{type_exception}) {
    die $result->{type_exception};
  }
  die "get_mrna_by_gene failed: unknown result";
}
package DOEKBase::DataAPI::annotation::genome_annotation::thrift_serviceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_get_taxon {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_taxon_result();
    eval {
      $result->{success} = $self->{handler}->get_taxon($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_taxon', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_assembly {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_assembly_result();
    eval {
      $result->{success} = $self->{handler}->get_assembly($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_assembly', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_types {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_types_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_types($args->token, $args->ref);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_types', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_type_descriptions {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_descriptions_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_type_descriptions($args->token, $args->ref, $args->feature_type_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_type_descriptions', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_type_counts {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_type_counts_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_type_counts($args->token, $args->ref, $args->feature_type_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_type_counts', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_ids {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_ids_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_ids($args->token, $args->ref, $args->feature_type_list, $args->region_list, $args->function_list, $args->alias_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_ids', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_features {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_features_result();
    eval {
      $result->{success} = $self->{handler}->get_features($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_features', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_proteins {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_proteins_result();
    eval {
      $result->{success} = $self->{handler}->get_proteins($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_proteins', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_locations {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_locations_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_locations($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_locations', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_publications {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_publications_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_publications($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_publications', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_dna {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_dna_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_dna($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_dna', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_functions {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_functions_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_functions($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_functions', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_feature_aliases {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_feature_aliases_result();
    eval {
      $result->{success} = $self->{handler}->get_feature_aliases($args->token, $args->ref, $args->feature_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_feature_aliases', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_cds_by_gene {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_gene_result();
    eval {
      $result->{success} = $self->{handler}->get_cds_by_gene($args->token, $args->ref, $args->gene_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_cds_by_gene', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_cds_by_mrna {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_cds_by_mrna_result();
    eval {
      $result->{success} = $self->{handler}->get_cds_by_mrna($args->token, $args->ref, $args->mrna_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_cds_by_mrna', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_gene_by_cds {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_cds_result();
    eval {
      $result->{success} = $self->{handler}->get_gene_by_cds($args->token, $args->ref, $args->cds_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_gene_by_cds', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_gene_by_mrna {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_gene_by_mrna_result();
    eval {
      $result->{success} = $self->{handler}->get_gene_by_mrna($args->token, $args->ref, $args->mrna_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_gene_by_mrna', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_mrna_by_cds {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_cds_result();
    eval {
      $result->{success} = $self->{handler}->get_mrna_by_cds($args->token, $args->ref, $args->gene_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_mrna_by_cds', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_get_mrna_by_gene {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new DOEKBase::DataAPI::annotation::genome_annotation::thrift_service_get_mrna_by_gene_result();
    eval {
      $result->{success} = $self->{handler}->get_mrna_by_gene($args->token, $args->ref, $args->gene_id_list);
    }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ServiceException') ){ 
      $result->{generic_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthorizationException') ){ 
      $result->{authorization_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AuthenticationException') ){ 
      $result->{authentication_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::ObjectReferenceException') ){ 
      $result->{reference_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::AttributeException') ){ 
      $result->{attribute_exception} = $@;
        }; if( UNIVERSAL::isa($@,'DOEKBase::DataAPI::annotation::genome_annotation::TypeException') ){ 
      $result->{type_exception} = $@;
    }
    $output->writeMessageBegin('get_mrna_by_gene', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
